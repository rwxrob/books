#!/usr/bin/env bash
# shellcheck disable=SC2034
# (disregard these lines for now)

# TODO: finish this, still a work in progress

start-working-at-terminal-velocity() {
	:check-that-you-have-prerequisites
	:setup-terminal-on-workstation
	:start-using-basic-terminal-commands
	:start-using-web-from-terminal
	:connect-with-other-terminal-lovers
	:start-creating-stuff-in-terminal
	:start-using-ai-from-terminal
	:start-managing-stuff-with-git
	:start-creating-terminal-apps
	:decide-what-to-learn-next
	:get-a-job-for-terminal-lovers
}

check-that-you-have-prerequisites() {
	:have-basic-linear-algebra             # y = 2x + 3
	:have-6th-grade-reading-level          # ex: The Boy Who Harnessed the Wind
	:have-computer-capable-of-unix-like-os # intel, apple, raspi, orangepi
	:have-admin-rights-on-computer         # root, administator
	:have-internet-access                  # basic cable connection
}

setup-terminal-on-workstation() {
	:start-using-computer-efficiently # launcher, alt-tab, search-centric
	:start-using-unix-like-system     # Ubuntu Linux, macOS, WSL2
	:start-using-package-managers     # apt, brew, winget.exe

	read -rp "Do you care about colors and fastest terminal? [Y|n]" resp
	if [[ "${resp,,}" =~ ^y ]]; then
		:start-using-wezterm-terminal
	else
		:start-using-builtin-terminal
	fi
}

# Note that this includes both default PowerShell on Windows
# as well as bash, zsh, and any other POSIX Unix shell.
start-using-basic-shell-commands() {
	:start-working-with-files-from-command-line
}

start-working-with-files-from-command-line() {
	local mode=command-line-only
	:grok-file-system-heirarchy
	:grok-drive-mounting
	:grok-how-everything-is-a-file-in-unix
	:start-listing-files
	:start-navigating-file-system
	:start-finding-files-with-find-command
	:start-working-with-file-permissions
	:start-seeing-whats-in-files
	:start-modifying-files-without-editor
	:start-organizing-files
	:start-linking-files
}

start-using-web-from-terminal() {
	start-fetching-single-web-pages-with-curl
	start-browsing-web-with-w3m
	fetch-initial-lynx-config
	start-browsing-web-with-lynx # requires bash scripting skill
}

start-connecting-with-other-terminal-lovers() {
	start-watching-terminal-geeks-on-youtube
	start-chatting-with-twitch-terminal-streamers
	start-using-weechat-for-twitch-and-irc
	start-chatting-on-preferred-irc-channels
}

start-creating-advanced-terminal-apps() {
	start-creating-advanced-bash-commands  # parameter expansion, hashes, etc.
	start-creating-terminal-commands-in-go # flags, bonzai, cobra, bubbletea
	learn-enough-lua-for-dynamic-configs   # ~/.wezterm.lua, ~/.config/nvim/init.lua
}

start-managing-stuff-with-git() {
	grok-git-essentials        # just for local backups
	start-using-bare-git-repos # just on local computer
	start-using-github         # but not necessarily for everything
	start-dot-repo             # often called "dotfiles"
	start-lab-repo             # for notes and testing
}

start-creating-stuff-using-terminal() {
	start-editing-text-from-terminal  # nano → ed → ex → vi (nvi) → vim → nvim
	start-using-terminal-multiplexers # screen → tmux
	start-taking-notes-in-markdown    #specifically GitHub Flavored Markdown
	start-writing-basic-bash-scripts  # but not too many until git
	start-custom-bashrc               # more than just ~/.bashrc
}

start-creating-advanced-bash-commands() {
	create-filters-in-bash
}

declare -i TRUE=0
declare -i FALSE=1
#declare TERMPREF=wezterm

start-using-dotfiles-repo() {
	: TODO pull in tmux.conf
}

start-writing-scripts-in-bash() {
	: grok-posix-vs-bash
	:customize-bashrc
}

start-using-with-irc() {
	:
}

start-using-unix-like-system() {
	start-using-basic-universal-shell-commands
	grok-history-of-unix
	grok-why-unix
	get-unix-like-system
}

start-using-wezterm() {
	launch-default-terminal
	install-wezterm
	config-wezterm-with-nano
}

start-using-package-managers() {
	grok-package-managers
	setup-package-manager
}

start-using-terminal-multiplexers() {
	grok-multiplexers
	install-tmux
	config-tmux-like-screen
	learn-tmux
}

config-tmux-like-screen() {
	: TODO give option to pull down reliable tmux.conf from Web
}

grok-multiplexers() {
	grok-screen-history
	grok-tmux-history
	if agree-to-config-tmux-like-screen; then
		download-tmux-screen-config
		apply-tmux-screen-config
	fi
}

download-tmux-screen-config() {
	:
}

apply-tmux-screen-config() {
	:
}

agree-to-config-tmux-like-screen() {
	:
}

grok-screen-history() {
	:
}

grok-tmux-history() {
	:
}

start-editing-text-from-terminal() {
	: customize-vim
	: customize-neovim
}

start-writing-your-own-docs() {
	:
}

start-using-git-and-github() {
	:
}

validate-computer-specs() {
	:
}

learn-alt-tab() {
	:
}

learn-launcher() {
	:
}

prefer-search-centric-navigation() {
	:
}

grok-why-unix() {
	:
}

grok-package-managers() {
	:
}

setup-package-manager() {
	:
}

launch-default-terminal() {
	:
}

install-wezterm() {
	:
}

start-using-computer-efficiently() {
	learn-alt-tab
	learn-launcher
	prefer-search-centric-navigation
}

config-wezterm-with-nano() {
	:
}

grok-unix-history() {
	:
}

launch-builtin-terminal() {
	if is-mac; then
		launch "terminal"
	elif is-win; then
		launch "wsl.exe" # we assume WSL2 was already installed
	elif is-lin; then
		: # TODO
	fi
}

press() {
	printf "Press the %s key." "$1"
}

enter() {
	printf "Type in '%s' and press Enter." "$1"
}

launch() {
	if is-mac; then
		:
	elif is-win; then
		press 'Win'
		enter "$1"
	elif is-linux; then # FIXME which linux
		:
	fi
}

have-mac() {
	if [[ "$OSTYPE" =~ ^darwin ]]; then
		return $TRUE
	else
		return $FALSE
	fi
}

get-unix-like-system() {
	if have-mac; then
		install-brew
	fi
}

install-brew() {
	echo would install brew
}

boost-to-terminal-velocity
