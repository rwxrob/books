#!/usr/bin/env bash

read -r -d '' helptxt <<EOF

This script is used for building these books as a web site and into the app:

  site
	app
	help
	watch

For more information, see the README.md file.

EOF

x-help() {
	echo "$helptxt"
}

x-book() {
	asciidoctor \
		-D "docs/$1" \
		-o "index.html" \
		-a copy_script=./common/assets/scripts/script.js \
		"./adoc/$1/index.adoc"
}


x-site() {
	asciidoctor \
		-D "docs" \
		-o "index.html" \
		-a copy_script=./common/assets/scripts/script.js \
		"./adoc/index.adoc"
	x-book code-mage
}

x-app() {
	go install ./cmd/rwxrob-books
}

x-watch() {
	(
		cd docs || return
		browser-sync &
	)
	tmux rename-window "watching $(pwd)"
	entr bash -c '
        echo "Change detected. Rebuilding..."
				./build site
				' < <(find .)
	sleep 1
}

# --------------------- completion and delegation --------------------

# The following provides bash completion with `complete -C build build`
# by deriving the names of the verbs for tab completion from those
# beginning with x- above. No other argument completion is provided.

while IFS= read -r line; do
	[[ $line =~ ^declare\ -f\ x\- ]] || continue
	commands+=("${line##declare -f x-}")
done < <(declare -F)
mapfile -t commands < \
	<(LC_COLLATE=C sort < <(printf "%s\n" "${commands[@]}"))

if [[ -n $COMP_LINE ]]; then
	line=${COMP_LINE#* }
	for c in "${commands[@]}"; do
		[[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
	done
	exit
fi

if [[ -n "$1" ]]; then
	declare action="$1"
	shift
	for c in "${commands[@]}"; do
		declare cmd
		cmd=$(command -v "x-$c")
		if [[ $c == "$action" && -n "$cmd" ]]; then
			"x-$action" "$@"
			exit $?
		fi
	done
fi

x-site
